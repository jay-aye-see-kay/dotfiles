" core setup
set nocompatible
set lazyredraw
set mouse=a
let mapleader= " "

" enable plugins
filetype plugin on
runtime macros/matchit.vim

" install plug.vim on new on new machines
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dir https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" plugins
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/goyo.vim'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'
" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
Plug 'w0rp/ale'
Plug 'zhou13/vim-easyescape'
" Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'gabrielelana/vim-markdown'
Plug 'mbbill/undotree'
" expt code exploring (still needs ctags and set up)
Plug 'majutsushi/tagbar'

" colorschemes
Plug 'tomasiser/vim-code-dark'

Plug 'ervandew/supertab'
" deopleate for vim | nvim
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()

" visual improvements
colorscheme codedark
syntax on
set number relativenumber
set nu rnu        " show current line and relative numbers
set showcmd       " display incomplete commands
set laststatus=2  " Always display the status line
set title
set termguicolors

" undotree
nnoremap <leader>u :UndotreeToggle<cr>
if has("persistent_undo")
  set undodir=$HOME/.cache/vim/persistent_undo
  set undofile
endif

" jk to escape
let g:easyescape_chars = { "j": 1, "k": 1 }
let g:easyescape_timeout = 100
cnoremap jk <ESC>
cnoremap kj <ESC>

" only show cursor line in active window/pane
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" quick edit vimrc
noremap <leader>v :tabe $HOME/.vim/vimrc

" vimwiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" tabs vs spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" fzf
nnoremap <leader>b :Buffer<CR>
nnoremap <leader>h :History<CR>
nnoremap <leader>hh :History<CR>
nnoremap <leader>z :FZF<CR>
nnoremap <leader>g :GFiles<CR>
nnoremap <leader>a :Ag<CR>
nnoremap <leader>l :BLines<CR>

let g:fzf_history_dir = '~/.local/share/fzf-history'

" NERDTree open and open on current
noremap <leader><leader> :NERDTreeToggle<CR>
noremap <leader>n :NERDTreeFind<cr>
noremap <leader>s :NERDTreeFind<cr><C-W><C-P>
let g:NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden=1

" if the only window open is NERDTree, close it
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" %% to %:h to get active file dir in ex mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" change cursor shape when in insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" search
set wildmenu
set showmatch
set incsearch
set hlsearch

" ideas from https://github.com/thoughtbot/dotfiles
augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
augroup END
" When the type of shell script is /bin/sh, assume a POSIX-compatible
"
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Display extra whitespace
set list listchars=tab:Â»Â·,trail:Â·,nbsp:Â·

" Use one space, not two, after punctuation.
set nojoinspaces

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Macros TODO sort, better keybindings maybe?
  " JS/TS: console.log the inner word one line below
  nnoremap <leader>rp viw"0yoconsole.log('0', 0);
  vnoremap <leader>rp "0yoconsole.log('0', 0);






" if hidden is not set, TextEdit might fail.
set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" deopleate ale connection
" let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option('sources', {
\ '_': ['ale', 'buffer'],
\})

let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"


" go to def and ref
nnoremap gd :ALEGoToDefinition
nnoremap gD :ALEGoToDefinitionInVSplit
nnoremap gr :ALEFindReferences
nnoremap K :ALEHover
nnoremap gy :ALEGoToTypeDefinition

" TODO Use `[c` and `]c` to navigate diagnostics
" nmap <silent> [c <Plug>(coc-diagnostic-prev)
" nmap <silent> ]c <Plug>(coc-diagnostic-next)

" TODO Remap for rename current word
" nmap <leader>rn <Plug>(coc-rename)

















" sytax hl debugging on F10
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

