" core
set mouse=a
let mapleader= " "
set title
set number relativenumber
set showmatch
set hlsearch
set linebreak " don't break words when wrapping
set hidden " leave buffers without abandoning
set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set nojoinspaces " Use one space, not two, after punctuation.
set splitbelow " matches i3 behaviour
set splitright " matches i3 behaviour

" enable plugins
filetype plugin on

" install plug.vim on new on new machines
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dir https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" plugins
call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-projectionist'
Plug 'mbbill/undotree'
Plug 'SirVer/ultisnips'
Plug 'dense-analysis/ale'
Plug 'vimwiki/vimwiki'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'fszymanski/deoplete-emoji'
Plug 'godlygeek/tabular'

" theme + color
Plug 'arcticicestudio/nord-vim'
call plug#end()
colorscheme nord
set termguicolors
let g:is_posix = 1 " shell for syntax highlighting purposes.

" git
set signcolumn=yes
set updatetime=100
let g:gitgutter_map_keys = 0
nnoremap <leader>gd :Gvdiffsplit!<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gl :Gclog<CR>
nnoremap <leader>gb :Gblame<CR>

" fuzzy git
nnoremap <leader>gfl :Commits<CR>
nnoremap <leader>gfc :BCommits<CR>

" undotree
nnoremap <leader>u :UndotreeToggle<cr>
if has("persistent_undo")
  set undodir=$HOME/.cache/vim/persistent_undo
  set undofile
endif

" only show cursor line in active window/pane
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" tabs vs spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
augroup tabwidths
  autocmd!
  autocmd FileType elm,python set tabstop=4
  autocmd FileType elm,python set softtabstop=4
  autocmd FileType elm,python set shiftwidth=4
augroup END


" faster scrolling
nnoremap <c-y> 3<c-y>
nnoremap <c-e> 3<c-e>

" toggle foldcolumn
nnoremap yof :set foldcolumn=<C-R>=&foldcolumn == 0 ? 2 : 0<CR><CR>
" don't auto open folds while moving by paragraph
set foldopen-=block


" double ctrl-backslash to is escape from terminal mode
tnoremap <C-\><C-\> <C-\><C-n>
" keep 'other' terminal cursor visible when in normal mode
hi! TermCursorNC ctermfg=15 guifg=#fdf6e3 ctermbg=14 guibg=#5f875f cterm=NONE gui=NONE


" {{{ fzf
nnoremap <leader>fb :Buffer<CR>
nnoremap <leader>fh :History<CR>
nnoremap <leader>fz :FZF<CR>
nnoremap <leader>fg :GFiles<CR>
nnoremap <leader>fa :Ag<CR>
nnoremap <leader>fl :BLines<CR>
nnoremap <leader>fc :Commands<CR>
" grep all text in my wiki (TODO add preview window)
nnoremap <leader>fw :call fzf#vim#ag('', { 'dir':  g:vimwiki_list[0]['path'] })<CR>
" shows files edited on current branch (diffed with master)
command! -bang EditedFiles call fzf#run(fzf#vim#with_preview(fzf#wrap({
      \ 'source': 'git diff --name-only `git merge-base origin/master HEAD`' })))
nnoremap <leader>fe :EditedFiles<CR>
" global search word under cursor/selection
nnoremap <leader>ff "0yiw:Ag <C-R>0<CR>
vnoremap <leader>ff "0y:Ag <C-R>0<CR>

let g:fzf_history_dir = '~/.local/share/fzf-history'
let $FZF_DEFAULT_OPTS = "--layout=reverse"

" fzf in floating window https://github.com/junegunn/fzf.vim/issues/664
function! CreateCenteredFloatingWindow()
    let width = min([&columns - 4, max([80, &columns - 20])])
    let height = min([&lines - 4, max([20, &lines - 10])])
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = "╭" . repeat("─", width - 2) . "╮"
    let mid = "│" . repeat(" ", width - 2) . "│"
    let bot = "╰" . repeat("─", width - 2) . "╯"
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
    set winhl=Normal:Floating
    let opts.row += 1
    let opts.height -= 2
    let opts.col += 2
    let opts.width -= 4
    call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    au BufWipeout <buffer> exe 'bw '.s:buf
endfunction
let g:fzf_layout = { 'window': 'call CreateCenteredFloatingWindow()' }

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
" see https://github.com/junegunn/fzf/blob/master/README-VIM.md#configuration
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" }}} fzf
"
" NERDTree open and open on current
noremap <leader><leader> :NERDTreeToggle<CR>
noremap <leader>n :NERDTreeFind<cr>
noremap <leader>s :NERDTreeFind<cr><C-W><C-P>
let g:NERDTreeQuitOnOpen = 1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1

" if the only window open is NERDTree, close it
augroup vimrcEx
  autocmd!
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

" %% to %:h to get active file dir in ex mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" change cursor shape when in insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

augroup printDebugMacros
  autocmd!
  " JS/TS: print next line
  autocmd FileType javascript,javascriptreact,typescript,typescriptreact nnoremap <leader>rp "0yiwoconsole.log('<C-R>0', <C-R>0);<ESC>
  autocmd FileType javascript,javascriptreact,typescript,typescriptreact vnoremap <leader>rp "0yoconsole.log('<C-R>0', <C-R>0);<ESC>
  " Python print next line
  autocmd FileType python nnoremap <leader>rp "0yiwoprint('<C-R>0', <C-R>0)<ESC>
  autocmd FileType python vnoremap <leader>rp "0yoprint('<C-R>0', <C-R>0)<ESC>
  " Ruby print next line
  autocmd FileType ruby nnoremap <leader>rp "0yiwoputs '<C-R>0: ' + <C-R>0<ESC>
  autocmd FileType ruby vnoremap <leader>rp "0yoputs '<C-R>0: ' + <C-R>0<ESC>
augroup END

" Copy filepath to system clipboard
nnoremap <leader>cp :let @+ = expand("%")
" Copy word/selection under cusor to system clipboard (Clipboard)
nnoremap <leader>cc "+yiw
vnoremap <leader>cc "+y

" disable exmode and commandline search
map q: <Nop>
nnoremap Q <nop>

" {{{ stuff from https://github.com/thoughtbot/dotfiles
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
augroup END

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" }}}

" {{{ debugging/misc hacks
" F12 to fix syntax highlighting when needed https://vim.fandom.com/wiki/Fix_syntax_highlighting
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

" ALE
let g:python3_host_prog = '/usr/bin/python3'
let g:ale_linters = {
\  'python': ['pyls', 'mypy'],
\  'proto': [],
\  'sh': ['language_server'],
\}
let g:ale_fixers = {
\  'c': ['clang-format'],
\  'elm': ['elm-format'],
\  'javascript': ['eslint'],
\  'javascriptreact': ['eslint'],
\  'markdown': ['prettier'],
\  'python': ['isort', 'black'],
\  'ruby': ['standardrb'],
\  'typescript': ['eslint'],
\  'typescriptreact': ['eslint'],
\}
let g:ale_lint_on_insert_leave = 1

nmap <leader>lg :ALEGoToDefinition<CR>
nmap <leader>lG :ALEGoToDefinitionInVSplit<CR>
nmap <leader>LG :ALEGoToDefinitionInVSplit<CR>
nmap <leader>lk :ALEDocumentation<CR>
nmap <leader>lh :ALEHover<CR>
nmap <leader>lr :ALEFindReferences<CR>
nmap <leader>ln :ALERename<CR>
nmap <leader>ls :ALESymbolSearch<CR>
nmap <leader>ll :ALELint<CR>
nmap <leader>lf :ALEFix<CR>
nmap <leader>lc :ALEReset<CR>
nmap <leader>le :ALEEnable<CR>
nmap <leader>ld :ALEDisable<CR>
nmap <leader>la :ALENext<CR>
nmap <leader>lx :ALEPrevious<CR>

" completions
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option('camel_case', v:true)
call deoplete#custom#option('sources', {
\ '_': ['ale', 'buffer', 'ultisnips', 'emoji'],
\})
call deoplete#custom#source('emoji', 'filetypes', ['gitcommit', 'markdown', 'text', 'rst', 'vimwiki'])
call deoplete#custom#source('emoji', 'converters', ['converter_emoji'])
autocmd CompleteDone * silent! pclose!

let g:markdown_fenced_languages = ['python']

" vimwiki
let g:vimwiki_list = [{'path': '~/Documents/vimwiki/', 'syntax': 'markdown', 'ext': '.wiki.md'}]
let g:vimwiki_conceallevel = 0

" 'list toggle' as ctrl space I use to clear notifications
nnoremap glt :VimwikiToggleListItem<CR>
vnoremap glt :VimwikiToggleListItem<CR>

augroup naturalMovementInTextFiles
  autocmd!
  autocmd FileType text,markdown,vimwiki nnoremap j gj
  autocmd FileType text,markdown,vimwiki nnoremap k gk
augroup END

augroup downsheet
  autocmd!
  autocmd BufRead,BufNewFile *.dsh set filetype=toml
  autocmd BufRead,BufNewFile *.dsh set nowrap
  autocmd BufWritePre *.dsh :%!dsc
augroup END

" Load all plugins and helptags
packloadall
silent! helptags ALL
