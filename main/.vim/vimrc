" core
set mouse=a
let mapleader= " "
set title
set number relativenumber
set showmatch
set hlsearch
set linebreak " don't break words when wrapping
set hidden " leave buffers without abandoning
set list listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set nojoinspaces " Use one space, not two, after punctuation.
set splitbelow " matches i3 behaviour
set splitright " matches i3 behaviour
set nowrap
set updatetime=100
" disable exmode and commandline search
map q: <nop>
nnoremap Q <nop>
" remove insert last while in insert
inoremap <C-a> <nop>
" make Y consistent with C and D.
nnoremap Y y$
" increase oldfile saved (used for fzf's :History)
" ( default is !,'100,<50,s10,h )
set shada=!,'1000,<50,s10,h

" install plug.vim on new on new machines
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dir https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" plugins
call plug#begin('~/.vim/plugged')
source $HOME/.vim/file-tree.vim
source $HOME/.vim/functions.vim
source $HOME/.vim/language-server.vim
source $HOME/.vim/search.vim
source $HOME/.vim/terminal.vim
source $HOME/.vim/theme.vim
source $HOME/.vim/vcs.vim
source $HOME/.vim/wiki.vim

Plug 'godlygeek/tabular'
Plug 'simnalamburt/vim-mundo'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'junegunn/goyo.vim'
Plug 'AndrewRadev/switch.vim'
Plug 'jeetsukumaran/vim-indentwise'
Plug 'itchyny/lightline.vim'
Plug 'yazgoo/unicodemoji', { 'branch': 'main' }
call plug#end()


" undotree
nnoremap <leader>u :MundoToggle<cr>
let g:mundo_preview_bottom = 1
let g:mundo_width = 40
let g:mundo_preview_height = 20
if has("persistent_undo")
  set undodir=$HOME/.cache/vim/persistent_undo
  set undofile
endif

" Only show cursorline on focued window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" tabs vs spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
augroup tabwidths
  autocmd!
  autocmd FileType elm,python set tabstop=4
  autocmd FileType elm,python set softtabstop=4
  autocmd FileType elm,python set shiftwidth=4
augroup END

" faster scrolling
nnoremap <c-y> 3<c-y>
nnoremap <c-e> 3<c-e>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Traditional save shortcuts
nnoremap <silent> <C-s> :w<CR>
nnoremap <silent> <D-s> :w<CR>

" toggle foldcolumn
nnoremap yof :set foldcolumn=<C-R>=&foldcolumn == 0 ? 2 : 0<CR><CR>
" don't auto open folds while moving by paragraph
set foldopen-=block

" %% to %:h to get active file dir in ex mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Copy filepath to system clipboard
nnoremap <leader>cp :let @+ = expand("%")<CR>
" Copy word/selection under cusor to system clipboard (Clipboard)
nnoremap <leader>cc "+yiw
vnoremap <leader>cc "+y

" {{{ stuff from https://github.com/thoughtbot/dotfiles
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .eslintrc,tsconfig.json set filetype=json5
augroup END
" }}}

let g:markdown_fenced_languages = ['python']

augroup downsheet
  autocmd!
  autocmd BufRead,BufNewFile *.dsh set filetype=toml
  autocmd BufRead,BufNewFile *.dsh set nowrap
  autocmd BufWritePre *.dsh :%!dsc
augroup END

"
" quickfix list
"
augroup quickFixList
  " dd to remove an item from the quick fix list
  autocmd FileType qf nnoremap <buffer><silent> dd
        \ <Cmd>call setqflist(filter(getqflist(), {idx -> idx != line('.') - 1}), 'r') <Bar> cc<CR>
  " s to 'scroll to' a location, but keep focus on the quick fix list
  autocmd FileType qf nnoremap <buffer><silent> s <CR>zz<C-w><C-p>
augroup END

"
" TODO make a writing section
"
nnoremap yog :Goyo<CR>
" 100 chars wide x 100% height
let g:goyo_width = 100
let g:goyo_height = 100

" emoji stuff
nnoremap <leader>e :Unicodemoji<CR>

"
" Statusbar
"
let g:lightline = {
\   'colorscheme': 'github',
\   'active': {
\     'left': [ [ 'mode', 'paste' ],
\               [ 'cocstatus', 'readonly', 'gitbranch', 'relativepath', 'modified' ] ]
\   },
\   'inactive': {
\     'left': [ [ 'relativepath' ] ]
\   },
\   'component_function': {
\     'cocstatus': 'coc#status',
\     'gitbranch': 'FugitiveHead'
\   },
\ }
